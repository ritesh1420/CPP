/* We can define class members static using static keyword. 
When we declare a member of a class as static, 
it means no matter how many objects of the class are created, 
there is only one copy of the static member.

A static member is shared by all objects of the class. 
All static data is initialized to zero when the first object is created, 
if no other initialization is present. 
We can't put it in the class definition,
but it can be initialized outside the class as done in the following example
by redeclaring the static variable, 
using the scope resolution operator :: to identify which class it belongs to. */

#include <iostream>
 
using namespace std;

class Box {
   public:
      static int objectCount;
      
      // Constructor definition
      Box(double l = 2.0, double b = 2.0, double h = 2.0) {
         cout <<"Constructor called." << endl;
         length = l;
         breadth = b;
         height = h;
         
         // Increase every time object is created
         cout << objectCount << endl ; 
         objectCount++;
         cout << objectCount << endl; 
      }
      double Volume() {
         return length * breadth * height;
      }
      
   private:
      double length;     // Length of a box
      double breadth;    // Breadth of a box
      double height;     // Height of a box
};

// Initialize static member of class Box
int Box::objectCount = 0;

int main(void) {
   Box Box1(3.3, 1.2, 1.5);    // Declare box1
   Box Box2(8.5, 6.0, 2.0);    // Declare box2

   // Print total number of objects.
   cout << "Total objects: " << Box::objectCount << endl;

   return 0;
}

