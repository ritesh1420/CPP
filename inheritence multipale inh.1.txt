#include<iostream>
using namespace std;
class base1
{
	protected:
		int rollno,section;
		public:
			void getdata()
			{
				rollno=9;
			}
			void display()
			{
				cout<<"base1 class roll no:"<<rollno<<endl;
			}
			 base1()
			{
				cout<<"constructor of base1 class"<<endl;
			}
				 ~base1()
			{
				cout<<"distructor of base1 class"<<endl;
			}
};
class base2
{
	protected:
	int age;
	public:
		void getdata()
		
		{
			age=8;
		}
		void display()
		{
			cout<<"base2 class age is:"<<age<<endl;
		}
		base2()
			{
				cout<<"constructor of base2 class"<<endl;
			}	
				~base2()
			{
				cout<<"distructor of base2 class"<<endl;
			}	
};
class derive:public base1,public base2
{
	int gf;
	public:
		void getdata()
		{
			gf=1;
		}
		void display()
		{
			cout<<" derive class number of gf:"<<gf<<endl;
		}
			derive()
			{
				cout<<"constructor of derive class"<<endl;
			}
				~derive()
			{
				cout<<"distructor of derive class"<<endl;
			}
};
int main()
{
	derive d;//constructor of base1,base2,derive class will call
	//at last distructor of derive,base2,base1 will be call
	d.getdata();//derive class function will be call
	d.display();
	d.base1::getdata();//base1 class function will be call
	d.base1::display();
	d.base2::getdata();//base2 class function will get call;
	d.base2::display();
}